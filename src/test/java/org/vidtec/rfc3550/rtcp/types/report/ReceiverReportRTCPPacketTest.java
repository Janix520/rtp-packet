package org.vidtec.rfc3550.rtcp.types.report;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertTrue;
import static org.testng.Assert.fail;

import java.net.UnknownHostException;
import java.util.Arrays;
import java.util.List;

import org.testng.annotations.Test;
import org.vidtec.rfc3550.rtcp.types.RTCPPacket.PayloadType;
import org.vidtec.rfc3550.rtcp.types.report.ReportRTCPPacket.ReportBlock;

@Test
public class ReceiverReportRTCPPacketTest 
{

	
	public void testCanCastSelfToConcreteType()
	{
		final ReceiverReportRTCPPacket r = ReceiverReportRTCPPacket.builder()
				.withSsrc(20)
				.build();
		
		final ReceiverReportRTCPPacket p = r.asConcreteType();
		assertEquals(p.packetLength(), 8, "incorrect packet length");
	}

	public void testCanCreateEmptyRRPacketFromBuilder()
	{
		final byte[] data = { (byte)0x80, (byte)0xC9, 0x00, 0x08, 0x00, 0x00, 0x00, 0x14 };

		final ReceiverReportRTCPPacket r = ReceiverReportRTCPPacket.builder()
				.withSsrc(20)
				.build();
		
		assertEquals(r.packetLength(), 8, "incorrect packet length");
		assertTrue(r.is(PayloadType.RR), "incorrect payload type");
		assertTrue(!r.is(PayloadType.SDES), "incorrect payload type");
		assertTrue(!r.is(null), "incorrect payload type");
		assertEquals(r.payloadType(), PayloadType.RR, "incorrect payload type");

		assertTrue(r.blocks() != null, "incorrect blocks data");
		assertTrue(r.blocks().isEmpty(), "incorrect blocks data");
		assertTrue(!r.hasBlocks(), "incorrect blocks data");
		assertEquals(r.blockCount(), 0, "incorrect blocks data");

		assertEquals(r.ssrcSenderIdentifier(), 20, "incorrect ssrc sender");
		
		assertEquals(r.asByteArray(), data, "packet data not reformed correctly.");
	}
	
	

	public void testCanCreateEmptyRRPacketFromBuilderWithBadBlockImputs()
	{
		final byte[] data = { (byte)0x80, (byte)0xC9, 0x00, 0x08, 0x00, 0x00, 0x00, 0x14 };

		ReceiverReportRTCPPacket r = ReceiverReportRTCPPacket.builder()
				.withSsrc(20)
				.withReportBlocks((List<ReportBlock>)null)
				.build();
		
		assertEquals(r.packetLength(), 8, "incorrect packet length");
		assertTrue(r.is(PayloadType.RR), "incorrect payload type");
		assertTrue(!r.is(PayloadType.SDES), "incorrect payload type");
		assertTrue(!r.is(null), "incorrect payload type");
		assertEquals(r.payloadType(), PayloadType.RR, "incorrect payload type");

		assertTrue(r.blocks() != null, "incorrect blocks data");
		assertTrue(r.blocks().isEmpty(), "incorrect blocks data");
		assertTrue(!r.hasBlocks(), "incorrect blocks data");
		assertEquals(r.blockCount(), 0, "incorrect blocks data");

		assertEquals(r.ssrcSenderIdentifier(), 20, "incorrect ssrc sender");
		
		assertEquals(r.asByteArray(), data, "packet data not reformed correctly.");
		

		r = ReceiverReportRTCPPacket.builder()
				.withSsrc(20)
				.withReportBlocks((ReportBlock[])null)
				.build();
		
		assertEquals(r.packetLength(), 8, "incorrect packet length");
		assertTrue(r.is(PayloadType.RR), "incorrect payload type");
		assertTrue(!r.is(PayloadType.SDES), "incorrect payload type");
		assertTrue(!r.is(null), "incorrect payload type");
		assertEquals(r.payloadType(), PayloadType.RR, "incorrect payload type");

		assertTrue(r.blocks() != null, "incorrect blocks data");
		assertTrue(r.blocks().isEmpty(), "incorrect blocks data");
		assertTrue(!r.hasBlocks(), "incorrect blocks data");
		assertEquals(r.blockCount(), 0, "incorrect blocks data");

		assertEquals(r.ssrcSenderIdentifier(), 20, "incorrect ssrc sender");
		
		assertEquals(r.asByteArray(), data, "packet data not reformed correctly.");
	}
	


	public void testCanCreateEmptyRRPacketFromBuilderAtLimits()
	{
		final byte[] data = { (byte)0x9F, (byte)0xC9, 0x02, (byte)0xF0, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, 
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00		
		};

		final byte[] blockdata = { 0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02,
									0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00 };

		final ReportBlock b = ReportBlock.fromByteArray(blockdata);
		
		final ReceiverReportRTCPPacket r = ReceiverReportRTCPPacket.builder()
				.withReportBlocks(Arrays.asList( b, b, b, b, b, b, b, b, b, b, b, b, b ))
				.withReportBlocks( b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b)
				.withSsrc(0xFFFFFFFFL)
				.build();
		
		assertEquals(r.packetLength(), 752, "incorrect packet length");
		assertTrue(r.is(PayloadType.RR), "incorrect payload type");
		assertTrue(!r.is(PayloadType.SDES), "incorrect payload type");
		assertTrue(!r.is(null), "incorrect payload type");
		assertEquals(r.payloadType(), PayloadType.RR, "incorrect payload type");

		assertTrue(r.blocks() != null, "incorrect blocks data");
		assertTrue(!r.blocks().isEmpty(), "incorrect blocks data");
		assertEquals(r.blocks().size(), 31, "incorrect blocks size");
		assertTrue(r.hasBlocks(), "incorrect blocks data");
		assertEquals(r.blockCount(), 31, "incorrect blocks data");

		assertEquals(r.ssrcSenderIdentifier(), 0xFFFFFFFFL, "incorrect ssrc sender");
		
		assertEquals(r.asByteArray(), data, "packet data not reformed correctly.");
	}
		
	
	public void testCanCreateSimpleRRPacketFromBuilder()
	{
		final byte[] data = { (byte)0x82, (byte)0xC9, 0x00, (byte)0x38, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x14, 
								    0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
								    0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00
		};

		final byte[] blockdata = { 0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02,
									0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00 };

		final ReportBlock b = ReportBlock.fromByteArray(blockdata);
		
		final ReceiverReportRTCPPacket r = ReceiverReportRTCPPacket.builder()
				.withReportBlocks(Arrays.asList( b ))
				.withReportBlocks( b )
				.withSsrc(20)
				.build();
		
		assertEquals(r.packetLength(), 56, "incorrect packet length");
		assertTrue(r.is(PayloadType.RR), "incorrect payload type");
		assertTrue(!r.is(PayloadType.SDES), "incorrect payload type");
		assertTrue(!r.is(null), "incorrect payload type");
		assertEquals(r.payloadType(), PayloadType.RR, "incorrect payload type");

		assertTrue(r.blocks() != null, "incorrect blocks data");
		assertTrue(!r.blocks().isEmpty(), "incorrect blocks data");
		assertEquals(r.blocks().size(), 2, "incorrect blocks size");
		assertTrue(r.hasBlocks(), "incorrect blocks data");
		assertEquals(r.blockCount(), 2, "incorrect blocks data");

		assertEquals(r.ssrcSenderIdentifier(), 20, "incorrect ssrc sender");
		
		assertEquals(r.asByteArray(), data, "packet data not reformed correctly.");
	}
	
	
	public void testCanCreateSimpleRRPacketFromByteArray()
	{
		final byte[] data = { (byte)0x82, (byte)0xC9, 0x00, (byte)0x38, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x14, 
								    0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
								    0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00
		};

		final ReceiverReportRTCPPacket r = ReceiverReportRTCPPacket.fromByteArray(data);
		
		assertEquals(r.packetLength(), 56, "incorrect packet length");
		assertTrue(r.is(PayloadType.RR), "incorrect payload type");
		assertTrue(!r.is(PayloadType.SDES), "incorrect payload type");
		assertTrue(!r.is(null), "incorrect payload type");
		assertEquals(r.payloadType(), PayloadType.RR, "incorrect payload type");

		assertTrue(r.blocks() != null, "incorrect blocks data");
		assertTrue(!r.blocks().isEmpty(), "incorrect blocks data");
		assertEquals(r.blocks().size(), 2, "incorrect blocks size");
		assertTrue(r.hasBlocks(), "incorrect blocks data");
		assertEquals(r.blockCount(), 2, "incorrect blocks data");

		assertEquals(r.ssrcSenderIdentifier(), 20, "incorrect ssrc sender");
		
		assertEquals(r.asByteArray(), data, "packet data not reformed correctly.");
	}

	
	public void testCanCreateSimpleRRPacketFromByteArrayAtLimits()
	{
		final byte[] data = { (byte)0x9F, (byte)0xC9, 0x02, (byte)0xF0, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, 
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,		
				0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02, 0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00		
		};

		final ReceiverReportRTCPPacket r = ReceiverReportRTCPPacket.fromByteArray(data);
		
		assertEquals(r.packetLength(), 752, "incorrect packet length");
		assertTrue(r.is(PayloadType.RR), "incorrect payload type");
		assertTrue(!r.is(PayloadType.SDES), "incorrect payload type");
		assertTrue(!r.is(null), "incorrect payload type");
		assertEquals(r.payloadType(), PayloadType.RR, "incorrect payload type");

		assertTrue(r.blocks() != null, "incorrect blocks data");
		assertTrue(!r.blocks().isEmpty(), "incorrect blocks data");
		assertEquals(r.blocks().size(), 31, "incorrect blocks size");
		assertTrue(r.hasBlocks(), "incorrect blocks data");
		assertEquals(r.blockCount(), 31, "incorrect blocks data");

		assertEquals(r.ssrcSenderIdentifier(), 0xFFFFFFFFL, "incorrect ssrc sender");
		
		assertEquals(r.asByteArray(), data, "packet data not reformed correctly.");
	}
	
	
	public void testCanValidatesCorrectlyFromByteArray() throws UnknownHostException
	{
		try
		{
			ReceiverReportRTCPPacket.fromByteArray( null );
			fail("Expected error");
		}
		catch(IllegalArgumentException e)
		{
			assertEquals(e.getMessage(), "packet data cannot be null", "wrong validation message");
		}
		try
		{
			ReceiverReportRTCPPacket.fromByteArray(new byte[] { (byte)0x80 } );
			fail("Expected error");
		}
		catch(IllegalArgumentException e)
		{
			assertEquals(e.getMessage(), "Packet too short, expecting at least 8 bytes, but found 1", "wrong validation message");
		}
		try
		{
			ReceiverReportRTCPPacket.fromByteArray(new byte[] { (byte)0x82, (byte)0xC9, 0x00, 0x00, 
																0x00, 0x00, 0x00, 0x00 } );
			fail("Expected error");
		}
		catch(IllegalArgumentException e)
		{
			assertEquals(e.getMessage(), "Packet states 2 report blocks, so expecting length 56, but only found 8 bytes.", "wrong validation message");
		}
		try
		{
			ReceiverReportRTCPPacket.fromByteArray(new byte[] { (byte)0x80, (byte)0xD9, 0x00, 0x00, 
																0x00, 0x00, 0x00, 0x00 } );
			fail("Expected error");
		}
		catch(IllegalArgumentException e)
		{
			assertEquals(e.getMessage(), "Invalid or unexpected packet type - should be 201", "wrong validation message");
		}
		try
		{
			ReceiverReportRTCPPacket.fromByteArray(new byte[] { (byte)0x80, (byte)0xC9, 0x00, 0x10, 
																0x00, 0x00, 0x00, 0x00 } );
			fail("Expected error");
		}
		catch(IllegalArgumentException e)
		{
			assertEquals(e.getMessage(), "Packet states 16 bytes length, but actual length is 8", "wrong validation message");
		}
		try
		{
			ReceiverReportRTCPPacket.fromByteArray(new byte[] { (byte)0xA0, (byte)0xC9, 0x00, 0x08, 
																0x00, 0x00, 0x00, 0x00 } );
			fail("Expected error");
		}
		catch(IllegalArgumentException e)
		{
			assertEquals(e.getMessage(), "RR packet should never be padded, malformed packet found", "wrong validation message");
		}
	} 
	
	
	public void testCanValidatesCorrectlyFromBuilder() throws UnknownHostException
	{
		try
		{
			// builder pattern too many blocks
			final byte[] blockdata = { 0x04, 0x03, 0x02, 0x01, 0x01, 0x03, 0x02, 0x01, 0x05, 0x04, 0x03, 0x02,
										0x06, 0x03, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00 };
	
			final ReportBlock b = ReportBlock.fromByteArray(blockdata);
			ReceiverReportRTCPPacket.builder()
					.withReportBlocks(Arrays.asList( b ))
					.withReportBlocks( b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b)
					.withSsrc(20)
					.build();

			fail("Expected error");
		}
		catch(IllegalArgumentException e)
		{
			assertEquals(e.getMessage(), "maximum report block size exceeded, expected at most 31, but was 34", "wrong validation message");
		}
		
	}
	

}
